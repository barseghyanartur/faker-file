faker_file.providers.pdf_file.generators package
************************************************


Submodules
==========


faker_file.providers.pdf_file.generators.pdfkit_generator module
================================================================

class faker_file.providers.pdf_file.generators.pdfkit_generator.PdfkitPdfGenerator(**kwargs)

   Bases: "BasePdfGenerator"

   Pdfkit PDF generator.

   Usage example:

      from faker import Faker
      from faker_file.providers.pdf_file import PdfFileProvider
      from faker_file.providers.pdf_file.generators.pdfkit_generator import (
          PdfkitPdfGenerator
      )

      FAKER = Faker()
      FAKER.add_provider(PdfFileProvider)

      file = FAKER.pdf_file(pdf_generator_cls=PdfkitPdfGenerator)

   Using *DynamicTemplate*:

      from faker_file.base import DynamicTemplate
      from faker_file.contrib.pdf_file.pdfkit_snippets import (
          add_h1_heading,
          add_h2_heading,
          add_h3_heading,
          add_h4_heading,
          add_h5_heading,
          add_h6_heading,
          add_heading,
          add_page_break,
          add_paragraph,
          add_picture,
          add_table,
      )

      # Create a file with lots of elements
      file = FAKER.pdf_file(
          pdf_generator_cls=PdfkitPdfGenerator,
          content=DynamicTemplate(
              [
                  (add_h1_heading, {}),
                  (add_paragraph, {}),
                  (add_h2_heading, {}),
                  (add_h3_heading, {}),
                  (add_h4_heading, {}),
                  (add_h5_heading, {}),
                  (add_h6_heading, {}),
                  (add_paragraph, {}),
                  (add_picture, {}),
                  (add_page_break, {}),
                  (add_h6_heading, {}),
                  (add_table, {}),
                  (add_paragraph, {}),
              ]
          )
      )

   encoding: str = 'utf-8'

   generate(content: str | DynamicTemplate, data: Dict[str, Any], provider: Faker | Generator | Provider, **kwargs) -> bytes

      Generate PDF.

   handle_kwargs(**kwargs) -> None

      Handle kwargs.


faker_file.providers.pdf_file.generators.reportlab_generator module
===================================================================

class faker_file.providers.pdf_file.generators.reportlab_generator.ReportlabPdfGenerator(**kwargs)

   Bases: "BasePdfGenerator"

   Reportlab PDF generator.

   Usage example:

      from faker import Faker
      from faker_file.providers.pdf_file import PdfFileProvider
      from faker_file.providers.pdf_file.generators import reportlab_generator

      FAKER = Faker()
      FAKER.add_provider(PdfFileProvider)

      file = FAKER.pdf_file(
          pdf_generator_cls=reportlab_generator.ReportlabPdfGenerator
      )

   Using *DynamicTemplate*:

      from io import BytesIO

      from faker import Faker
      from faker_file.base import DynamicTemplate
      from faker_file.providers.jpeg_file import JpegFileProvider
      from faker_file.providers.pdf_file import PdfFileProvider
      from faker_file.providers.pdf_file.generators import (
          reportlab_generator
      )
      from PIL import Image as PilImage
      from reportlab.lib.pagesizes import letter, landscape
      from reportlab.lib.styles import getSampleStyleSheet
      from reportlab.lib import colors
      from reportlab.pdfbase import pdfmetrics
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.platypus import (
          Image,
          Table,
          TableStyle,
          PageBreak,
          Paragraph,
      )

      FAKER = Faker()
      FAKER.add_provider(PdfFileProvider)

      # Add table function
      def pdf_add_table(
          provider, generator, story, data, counter, **kwargs
      ):
          rows = kwargs.get("rows", 3)
          cols = kwargs.get("cols", 4)

          # Define your table headers
          headers = [f"Header {i+1}" for i in range(cols)]

          # Generate the rest of the table data
          table_data = [
              [
                  provider.generator.word() for _ in range(cols)
              ] for _ in range(rows)
          ]

          # Add the headers to the table data
          table_data.insert(0, headers)

          # Create the table object
          table = Table(table_data)

          # Apply table styles
          table.setStyle(
              TableStyle(
                  [
                      ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
                      ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
                      ("ALIGN", (0, 0), (-1, -1), "CENTER"),
                      ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
                      ("FONTSIZE", (0, 0), (-1, 0), 14),
                      ("BOTTOMPADDING", (0, 0), (-1, 0), 12),
                      ("BACKGROUND", (0, 1), (-1, -1), colors.beige),
                      ("GRID", (0, 0), (-1, -1), 1, colors.black),
                      ("BOX", (0, 0), (-1, -1), 1, colors.black),
                  ]
              )
          )

          # Add the table to the document and build it
          story.append(table)

      # Add picture function
      def pdf_add_picture(
          provider, generator, story, data, counter, **kwargs
      ):
          jpeg_file = JpegFileProvider(provider.generator).jpeg_file(
              raw=True
          )

          # Create a BytesIO object and load the image data
          with BytesIO(jpeg_file) as input_stream:
              pil_image = PilImage.open(input_stream)

              # Resize the image
              new_width = 400
              new_height = 400
              pil_image = pil_image.resize((new_width, new_height))

              # Create a BytesIO object outside the 'with' statement
              output_stream = BytesIO()
              pil_image.save(output_stream, format='JPEG')
              output_stream.seek(0)  # Move to the start of the stream

              # Now you can use output_stream as your image data
              img = Image(output_stream)
              img.width = new_width
              img.height = new_height
              story.append(img)

      # Add page break function
      def pdf_add_page_break(
          provider, generator, story, data, counter, **kwargs
      ):
          # Insert a page break
          story.append(PageBreak())

      # Add paragraph function
      def pdf_add_paragraph(
          provider, generator, story, data, counter, **kwargs
      ):
          # Insert a paragraph
          styles = getSampleStyleSheet()
          style_paragraph = styles["Normal"]
          style_paragraph.fontName = generator.font_name
          pdfmetrics.registerFont(
              TTFont(generator.font_name, generator.font_path)
          )
          content = provider.generator.text(max_nb_chars=5_000)
          paragraph = Paragraph(content, style_paragraph)
          story.append(paragraph)

      # Create a file with table, page-break, picture, page-break, paragraph
      file = FAKER.pdf_file(
          pdf_generator_cls=(
              reportlab_generator.ReportlabPdfGenerator
          ),
          content=DynamicTemplate(
              [
                  (pdf_add_table, {}),
                  (pdf_add_page_break, {}),
                  (pdf_add_picture, {}),
                  (pdf_add_page_break, {}),
                  (pdf_add_paragraph, {}),
              ]
          )
      )

      # Create a file with text of 100 pages
      file = FAKER.pdf_file(
          pdf_generator_cls=(
              reportlab_generator.ReportlabPdfGenerator
          ),
          content=DynamicTemplate(
              [
                  (pdf_add_paragraph, {}),
                  (pdf_add_page_break, {}),
              ] * 100
          )
      )

   font_name: str = 'Vera'

   font_path: str = 'Vera.ttf'

   generate(content: str | DynamicTemplate, data: Dict[str, Any], provider: Faker | Generator | Provider, **kwargs) -> bytes

      Generate PDF.

      Parameters:
         * **content**

         * **data**

         * **provider** -- *PdfFileProvider* instance.

   handle_kwargs(**kwargs) -> None

      Handle kwargs.


Module contents
===============
